<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.3.xsd ">

	<!-- 使用spring组件扫描 -->
	<context:annotation-config/>
	<context:component-scan base-package="code.tianmao.h5.controller"/>

	<!-- 开启aop，对类代理,默认是false，对接口进行代理
    <aop:config proxy-target-class="true"></aop:config>
    -->

	<!-- 开启aop，对类代理,使用此标签才能支持shiro权限注解 -->
	<aop:config proxy-target-class="true"></aop:config>
	<!-- 开启shiro注解支持 -->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>

	<!--Spring 会把一些找不到 controller 的请求，放给默认的 servlet 容器来处理；从而能正常访问静态资源-->
	<!--    <mvc:default-servlet-handler/>-->
	<!--根路径默认返回这个视图-->
	<!--
        <mvc:view-controller path="/" view-name="index"/>
    -->
	<!-- 通过annotation-driven可以替代下边的处理器映射器和适配器 -->
	<mvc:annotation-driven conversion-service="conversionService" validator="validator">
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8"/>
			</bean>
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>


	<!-- 由于web.xml中设置是：由SpringMVC拦截所有请求,于是在读取静态资源文件的时候就会受到影响(说白了就是读不到) -->
	<!-- 经过下面的配置，该标签的作用就是：所有页面中引用"/js/**"的资源，都会从"/js/"里面进行查找 -->
	<!-- 我们可以访问http://IP:8080/xxx/js/my.css和http://IP:8080/xxx/resources/js/my.css对比出来 -->
	<mvc:resources mapping="/images/**" location="/images/"/>
	<mvc:resources mapping="/js/**" location="/js/"/>
	<mvc:resources mapping="/styles/**" location="/styles/"/>
	<mvc:resources mapping="/WEB-INF/**" location="/WEB-INF/"/>

	<!-- 配置视图解析器 要求将jstl的包加到classpath -->
	<!-- ViewResolver -->
	<bean
			class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/"/>
		<property name="suffix" value=".jsp"/>
	</bean>

	<!-- 文件上传 -->
	<bean id="multipartResolver"
		  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设置上传文件的最大尺寸为5MB -->
		<property name="maxUploadSize">
			<value>5242880</value>
		</property>
	</bean>
<!--	 定义统一异常处理器
	<bean class="code.tianmao.h5.sysconfig.exception.CustomExceptionResolver"></bean>-->

	<!-- 转换器 -->
	<bean id="conversionService"
		  class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<set>
				<bean class="code.tianmao.h5.sysconfig.converter.CustomDateConverter"/>
				<bean class="code.tianmao.h5.sysconfig.converter.StringTrimConverter"/>
			</set>
		</property>
	</bean>


	<!-- 校验器 -->
	<bean id="validator"
		  class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- 校验器 -->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
		<!-- 指定校验使用的资源文件，如果不指定则默认使用classpath下的ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource"/>
	</bean>
	<!-- 校验错误信息配置文件 -->
	<bean id="messageSource"
		  class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 资源文件名 -->
		<property name="basenames">
			<list>
				<value>classpath:CustomValidationMessages</value>
			</list>
		</property>
		<!-- 资源文件编码格式 -->
		<property name="fileEncodings" value="utf-8"/>
		<!-- 对资源文件内容缓存时间，单位秒 -->
		<property name="cacheSeconds" value="120"/>
	</bean>

</beans>